<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Azure SaaS Dev Kit Docs – Identity Framework</title>
    <link>https://azure.github.io/azure-saas/components/identity/</link>
    <description>Recent content in Identity Framework on Azure SaaS Dev Kit Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="https://azure.github.io/azure-saas/components/identity/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Components: Identity Provider</title>
      <link>https://azure.github.io/azure-saas/components/identity/identity-provider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure.github.io/azure-saas/components/identity/identity-provider/</guid>
      <description>
        
        
        &lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;For the identity framework, we chose to use &lt;a href=&#34;https://docs.microsoft.com/azure/active-directory-b2c/overview&#34;&gt;Azure AD B2C&lt;/a&gt; as our default identity provider. If you&amp;rsquo;d like to use another identity provider such as Azure AD or a different 3rd party tool, you can swap it out.&lt;/p&gt;
&lt;h3 id=&#34;what-does-azure-ad-b2c-give-us&#34;&gt;What does Azure AD B2C give us?&lt;/h3&gt;
&lt;p&gt;Azure AD B2C provides business-to-customer identity as a service. It enables you to easily authenticate users to your application using their preferred identity provider and is configurable to support a wide array of scenarios.&lt;/p&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Azure AD B2C has two methods of configuring the business logic that users follow to gain access to your application: &lt;a href=&#34;https://docs.microsoft.com/azure/active-directory-b2c/user-flow-overview&#34;&gt;User Flows and Custom Policies&lt;/a&gt;. User Flows are predefined and are configured directly through the Azure AD B2C Web Portal. Custom Policies are XML based configuration files that are uploaded to the Azure AD B2C tenant.&lt;/p&gt;
&lt;p&gt;The ASDK project uses Custom Policies to configure the Azure AD B2C tenant. The XML configuration that gets deployed can be found under the &lt;a href=&#34;https://github.com/Azure/azure-saas/tree/main/src/Saas.Identity/Saas.IdentityProvider&#34;&gt;Saas.IdentityProvider&lt;/a&gt; folder within the repo, and you can read more about how to configure custom policies &lt;a href=&#34;https://docs.microsoft.com/azure/active-directory-b2c/user-flow-overview&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When deploying the Azure AD B2C Identity Provider via the instructions found in the &lt;a href=&#34;../../../quick-start&#34;&gt;Quick Start&lt;/a&gt; guide, Azure AD B2C is configured to do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Provide a hosted SignIn and SignUp page that users can be directed to&lt;/li&gt;
&lt;li&gt;Reach out to the &lt;a href=&#34;../permissions-service&#34;&gt;SaaS.Permissions.Service&lt;/a&gt; upon a user signing in to fetch their application permissions and roles&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can change or extend the behavior of the Azure AD B2C tenant that gets deployed with ASDK to do things like collect more information during signup, force users to enroll in Multi-Factor Authentication (MFA), and much more by modifying the custom policies.&lt;/p&gt;
&lt;h3 id=&#34;app-roles-and-global-admin&#34;&gt;App Roles and Global Admin&lt;/h3&gt;
&lt;p&gt;We are using &lt;a href=&#34;https://docs.microsoft.com/azure/active-directory/develop/howto-add-app-roles-in-azure-ad-apps&#34;&gt;App Roles&lt;/a&gt; to grant users &amp;ldquo;Global Admin&amp;rdquo; capabilities for the application. This App Role should only be granted to staff users that need it to administrate ALL the tenants across the entire SaaS solution. These roles are stored directly in Azure AD B2C and are returned in the JWT token claims when the user signs in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do I add a user to the default Global Admin role?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you followed our steps in the &lt;a href=&#34;../../../quick-start&#34;&gt;Quick Start&lt;/a&gt;, the user that created the Azure AD B2C tenant will  be automatically added to this global admin role. Follow these steps if you&amp;rsquo;d like to add additional users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Switch to your Azure AD B2C Tenant in the Azure portal&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Navigate to the Azure Active Directory &lt;a href=&#34;https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview&#34;&gt;menu&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &amp;ldquo;Enterprise Applications&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Under the &amp;ldquo;Application Type&amp;rdquo; dropdown, select &amp;ldquo;All Applications&amp;rdquo; and click &amp;ldquo;Apply&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select the &lt;code&gt;asdk-admin-api&lt;/code&gt; app &lt;img src=&#34;https://azure.github.io/azure-saas/azure-saas/images/aad-enterprise-apps.png&#34; alt=&#34;enterprise apps&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &amp;ldquo;Users and Groups&amp;rdquo; from the menu on the left&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &amp;ldquo;Add user/group&amp;rdquo; &lt;img src=&#34;https://azure.github.io/azure-saas/azure-saas/images/aad-enterprise-apps-users-groups.png&#34; alt=&#34;Add user/groups&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select the users you&amp;rsquo;d like to add to the app role&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &amp;ldquo;Assign&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Repeat steps  5-9, but on the &lt;code&gt;asdk-b2c-web&lt;/code&gt; app instead&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;design-considerations-and-faq&#34;&gt;Design Considerations and FAQ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Q: Why did we choose Azure AD B2C?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A: We chose Azure AD B2C because in additional to authenticating with &amp;ldquo;local&amp;rdquo; accounts, it can be easily extended to support a wide array of other identity providers such as Azure AD, GitHub, and many more. See the &lt;a href=&#34;https://docs.microsoft.com/azure/active-directory-b2c/add-identity-provider&#34;&gt;documentation&lt;/a&gt; for details.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Q: Why did we choose custom policies over user flows?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A: User Flows are predefined and meant for more basic use cases. Custom Policies provide more support for automating the setup and deployment of the Azure AD B2C configuration, and generally provide greater extensibility in the long term for more complicated scenarios.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Q: Why are we only using Azure AD B2C App Roles for global administrator permissions? Why did we choose to put the tenant permissions in a special API?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A: App roles in Azure AD B2C are nice, but too many of them get extremely complicated to manage. You can absolutely achieve application tenant permissions using just app roles, but we wouldn&amp;rsquo;t reccomend it if you are going to have more than just a handful of tenants. That&amp;rsquo;s why we chose to separate the application tenant permissions into a special API/data store that gets called during the user login flow.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Components: SaaS.Permissions.Service</title>
      <link>https://azure.github.io/azure-saas/components/identity/permissions-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure.github.io/azure-saas/components/identity/permissions-service/</guid>
      <description>
        
        
        &lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/Azure/azure-saas/tree/main/src/Saas.Identity/Saas.Permissions&#34;&gt;SaaS.Permissions.Service&lt;/a&gt; module (aka Permissions Service) is a component of the &lt;a href=&#34;../&#34;&gt;Identity Framework&lt;/a&gt;. It is an API that serves 2 main functions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Handles Create, Read, Update, and Delete (CRUD) operations from the rest of the solution for permission data&lt;/li&gt;
&lt;li&gt;Serves as an endpoint for the &lt;a href=&#34;../identity-provider&#34;&gt;Identity Provider&lt;/a&gt; to retrieve permission data in order to enrich the user token with claims&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;how-to-run-locally&#34;&gt;How to Run Locally&lt;/h2&gt;
&lt;p&gt;Instructions to get this module running on your local dev machine are located in the module&amp;rsquo;s &lt;a href=&#34;https://github.com/Azure/azure-saas/tree/main/src/Saas.Identity/Saas.Permissions&#34;&gt;readme.md&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;configuration-and-secrets&#34;&gt;Configuration and Secrets&lt;/h3&gt;
&lt;p&gt;A list of app settings and secrets can be found in the module&amp;rsquo;s &lt;a href=&#34;https://github.com/Azure/azure-saas/tree/main/src/Saas.Identity/Saas.Permissions&#34;&gt;readme.md&lt;/a&gt;. All non-secret values will have a default value in the &lt;code&gt;appsettings.json&lt;/code&gt; file. All secret values will need to be set using the &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/security/app-secrets?view=aspnetcore-6.0&amp;amp;tabs=windows&#34;&gt;.NET Secret Manager&lt;/a&gt; when running the module locally, as it is not recommended to have these secret values in your &lt;code&gt;appsettings.json&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;When deployed to Azure, the application is configured to load its secrets from &lt;a href=&#34;https://docs.microsoft.com/azure/key-vault/general/overview&#34;&gt;Azure Key Vault&lt;/a&gt; instead. If you deploy the project using our ARM/Bicep templates from the Quick Start guide, the modules will be deployed to an Azure App Service which accesses the Azure Key Vault using a &lt;a href=&#34;https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/overview&#34;&gt;System Assigned Managed Identity&lt;/a&gt;. The Permissions Service module is also configured with &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/security/key-vault-configuration?view=aspnetcore-6.0#use-a-key-name-prefix&#34;&gt;key name prefixes&lt;/a&gt; to only import secrets with the prefix of &lt;code&gt;permissions-&lt;/code&gt;, as other modules share the same Azure Key Vault.&lt;/p&gt;
&lt;h2 id=&#34;module-design&#34;&gt;Module Design&lt;/h2&gt;
&lt;h3 id=&#34;dependencies&#34;&gt;Dependencies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SQL Server Database&lt;/li&gt;
&lt;li&gt;Microsoft Graph API&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;consumers&#34;&gt;Consumers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../identity-provider&#34;&gt;Identity Provider&lt;/a&gt; (Azure AD B2C)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../components/admin-service&#34;&gt;Admin Service&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;authentication&#34;&gt;Authentication&lt;/h3&gt;
&lt;p&gt;The Permissions Service is secured using API Key Authentication. The API Key is set using the &lt;code&gt;AppSettings:ApiKey&lt;/code&gt; secret and there is middleware on the API that will verify that all incoming requests have an API key that matches on the &lt;code&gt;x-api-key&lt;/code&gt; header. If you deploy the application following the steps in the &lt;a href=&#34;../../../quick-start&#34;&gt;Quick Start&lt;/a&gt; guide, an API key is randomly generated for you and uploaded to Azure Key Vault.&lt;/p&gt;
&lt;h3 id=&#34;database&#34;&gt;Database&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/ef/core/&#34;&gt;Entity Framework Core&lt;/a&gt; is used to manage the SQL Server Database schema and connections. We are using &lt;a href=&#34;https://docs.microsoft.com/en-us/ef/ef6/modeling/code-first/workflows/new-database&#34;&gt;Code First Development&lt;/a&gt; and, if no data or schema exists in the database on application startup, the application will automatically create the database schema that is defined in our &lt;a href=&#34;https://github.com/Azure/azure-saas/tree/main/src/Saas.Identity/Saas.Permissions/Saas.Permissions.Service/Data&#34;&gt;model files&lt;/a&gt;. If you make any changes to these models, you will need to preform a &lt;a href=&#34;https://docs.microsoft.com/en-us/ef/ef6/modeling/code-first/migrations/&#34;&gt;migration&lt;/a&gt; to upgrade the database schema.&lt;/p&gt;
&lt;h3 id=&#34;microsoft-graph-api&#34;&gt;Microsoft Graph API&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://docs.microsoft.com/en-us/graph/overview&#34;&gt;Microsoft Graph API&lt;/a&gt; is an API that provides a unified experience for accessing data on users within a Microsoft Entra or Azure AD B2C tenant. Since we are using Azure AD B2C as our default Identity Provider, we must also use the Graph API when it becomes necessary to fetch data on our users. If you&amp;rsquo;d like to replace the identity provider with something else, you must also replace the Graph API calls within the permissions service to gather user data. These areas are clearly labeled with comments inline with the code.&lt;/p&gt;
&lt;h3 id=&#34;swagger&#34;&gt;Swagger&lt;/h3&gt;
&lt;p&gt;The Permissions Service uses &lt;a href=&#34;https://www.nuget.org/packages/Swashbuckle&#34;&gt;Swashbuckle&lt;/a&gt; to generate the OpenAPI definition and a UI for testing. This definition is also consumed by the Admin Service to generate its client implementation for interfacing with this API. Read more about using it &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/tutorials/getting-started-with-swashbuckle?view=aspnetcore-6.0&amp;amp;tabs=visual-studio&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;faq-and-design-considerations&#34;&gt;FAQ and Design Considerations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Permissions are stored in the database in a single table (dbo.Permissions) with 3 pieces of data: Tenant ID, User ID (Email), and PermissionString. All 3 together make the row unique (i.e., you cannot have the same Permission for the same user on the same tenant more than once). Permissions are stored as a string (ex: Admin, User.Read, User.Write) for simplicity and extensibility. You may choose to store these in a separate database table and reference them by ID number if you have a large number of permissions and you want to enforce the types of permissions being assigned.&lt;/li&gt;
&lt;li&gt;We have purposefully chosen to flow all CRUD operations on permissions through the &lt;a href=&#34;../../../components/admin-service&#34;&gt;Admin Service&lt;/a&gt;. This is for a number of reasons:
&lt;ol&gt;
&lt;li&gt;It removes the burden of authorization from the permissions service. All the permissions service needs to worry about is accepting a valid API Key, which only the identity provider and admin service possess. For higher security applications, you may choose to preform more authorization checks before adding permissions&lt;/li&gt;
&lt;li&gt;It simplifies the architecture. The frontend applications do not need to have any knowledge of the permissions service existing. When a tenant is created, the applications make 1 call to the admin service, and it handles the subsequent call to update the permissions records.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Components: Identity Flows</title>
      <link>https://azure.github.io/azure-saas/components/identity/identity-flows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure.github.io/azure-saas/components/identity/identity-flows/</guid>
      <description>
        
        
        &lt;h2 id=&#34;sign-up&#34;&gt;Sign Up&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;sequenceDiagram  
actor user as User 
participant frontend as Frontend Application
participant auth as Auth Service (B2C)


user-&amp;gt;&amp;gt;frontend : Register (/register)
frontend--&amp;gt;&amp;gt;user : Redirect to B2C Hosted Sign Up Page
user-&amp;gt;&amp;gt;auth : Sign Up Submitted
auth-&amp;gt;&amp;gt;auth : Create Account
auth--&amp;gt;&amp;gt;user : Redirect with JWT
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;sign-in&#34;&gt;Sign In&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;sequenceDiagram  
actor user as User
participant frontend as Frontend Application
participant auth as Auth Service (B2C)
participant perm as Permissions API


user-&amp;gt;&amp;gt;frontend : Login (/login)
frontend--&amp;gt;&amp;gt;user : Redirect to B2C Hosted Sign In Page
user-&amp;gt;&amp;gt;auth : Login Submitted
auth-&amp;gt;&amp;gt;perm : Get Permissions &amp;amp; Roles
perm--&amp;gt;&amp;gt;auth : Permissions &amp;amp; Roles
auth-&amp;gt;&amp;gt;auth : Add Custom Claims to JWT
auth--&amp;gt;&amp;gt;user : Redirect with JWT
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;add-permissions-record-generic&#34;&gt;Add Permissions Record (Generic)&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;sequenceDiagram
participant frontend as Frontend Application
participant admin as Admin API
participant perm as Permissions API

frontend-&amp;gt;&amp;gt;admin : Add Tenant Permission for User
admin-&amp;gt;&amp;gt;admin : Is Requestor Admin of Tenant?
admin-&amp;gt;&amp;gt;perm : Add Tenant Permission for User
perm-&amp;gt;&amp;gt;perm : Permission Added in DB
perm--&amp;gt;&amp;gt;admin : Ok
admin--&amp;gt;&amp;gt;frontend : Ok

&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>Components: Caveats &amp; Limitations</title>
      <link>https://azure.github.io/azure-saas/components/identity/caveats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure.github.io/azure-saas/components/identity/caveats/</guid>
      <description>
        
        
        &lt;p&gt;There are a few caveats of the identity solution provided within this reference implementation that you should be aware of.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This reference implementation does not provide support for per-tenant “local” users. All users will be stored in a single Azure AD B2C tenant and the user objects themselves will not be separated by the tenant they signed up with. For example, if you had &lt;code&gt;jill@contoso.com&lt;/code&gt; sign up to tenant 1, they would also be able to sign into tenant 2, tenant 3, and tenant 4 with the same &lt;code&gt;jill@contoso.com&lt;/code&gt; account. You may still control what tenants they have roles under via the permissions that come back in their JWT claims.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The current version only supports “local” users and social identities and does not provide support for configuring federation with other Identity Providers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Future versions will likely not provide support for “per-tenant federation” (i.e., where each tenant could bring their own IdP). This is primarily due to limitations in Azure AD B2C which introduce significant overhead when attempting to manage “per-tenants” users &amp;amp; policies within a directory.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is possible, but each federation is configured via directory-wide policy and there is a limit of 200 policies on a directory.&lt;/li&gt;
&lt;li&gt;If all tenants can be assumed to have their own Azure Active Directory (regular B2B), then per-tenant federation could be implemented using Azure AD (multitenant) federation identity provider with the application code doing the authorization based on specific tenant id claim. However, if each tenant wants to be able to configure their own completely different IdP (e.g., Okta, Ping, Auth0, Cognito), it would require additional work due to policy limits.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Azure AD B2C has a documented limitation preventing API chaining via the OAuth 2.0 On-Behalf-Of flow. You may request a token to call an API via a web app, but not an API via an API. See the &lt;a href=&#34;https://github.com/AzureAD/microsoft-identity-web/wiki/b2c-limitations&#34;&gt;Azure AD B2C Limitations&lt;/a&gt; page for more information.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Components: Identity Framework Setup - Manual</title>
      <link>https://azure.github.io/azure-saas/components/identity/identity-framework-setup-manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azure.github.io/azure-saas/components/identity/identity-framework-setup-manual/</guid>
      <description>
        
        
        &lt;p&gt;On this page, you will find instructions for how to manually setup the Identity Framework through a combination of the Azure Portal as well as relevant PowerShell commands&lt;/p&gt;
&lt;h1 id=&#34;setup-identity-framework---manual-advanced&#34;&gt;Setup Identity Framework - Manual (Advanced)&lt;/h1&gt;
&lt;h2 id=&#34;1-requirements&#34;&gt;1. Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/cli/azure/&#34;&gt;Azure CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.openssl.org/&#34;&gt;Open SSL&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Note: An OpenSSL executable is also bundled with Git for Windows at &lt;code&gt;C:\Program Files\Git\usr\bin\openssl.exe&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Required Extensions:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=AzureADB2CTools.aadb2c&#34;&gt;Azure AD B2C Custom Policy Extension&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-instructions&#34;&gt;2. Instructions&lt;/h2&gt;
&lt;h3 id=&#34;step-1-create-b2c-tenant-in-azure&#34;&gt;Step 1. Create B2C Tenant in Azure&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;From the dashboard, click &lt;code&gt;Create a Resource&lt;/code&gt; and select &lt;code&gt;Azure Active Directory B2C&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Note: A reference is registered in your subscription at time of creation to associate the tenant with your subscription.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://azure.github.io/azure-saas/azure-saas/images/identity-framework-manual-step-1-adding-service.png&#34; alt=&#34;(Azure Add Service Screenshot)&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-2-log-into-newly-created-azure-ad-b2c-tenant&#34;&gt;Step 2. Log into newly created Azure AD B2C tenant&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Click on &lt;code&gt;Open B2C Tenant&lt;/code&gt; quicklink to immediately change directory to your new Azure AD B2C tenant&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://azure.github.io/azure-saas/azure-saas/images/identity-framework-manual-step-2-switch-tenant-quicklink.png&#34; alt=&#34;(Switch Directory Screenshot)&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-3-optional-invite-collaborators-to-the-new-azure-ad-b2c-tenant&#34;&gt;Step 3. (Optional) Invite collaborators to the new Azure AD B2C tenant&lt;/h3&gt;
&lt;p&gt;Note: Collaborators are other developers you wish to help manage your services, not customers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to the &lt;code&gt;Azure AD B2C&lt;/code&gt; dashboard while logged into your new Azure AD B2C tenant, click &lt;code&gt;Users&lt;/code&gt; in the lefthand navbar&lt;/li&gt;
&lt;li&gt;After navigating, you may create or invite guest users into your Azure AD B2C tenant allowing them access&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://azure.github.io/azure-saas/azure-saas/images/identity-framework-manual-step-3-invite-collaborators.png&#34; alt=&#34;(Tenant User Management Screenshot)&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-4-create-necessary-app-registrations-in-azure-ad-b2c-tenant&#34;&gt;Step 4. Create necessary app registrations in Azure AD B2C tenant&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;From the &lt;code&gt;Azure AD B2C&lt;/code&gt; dashboard, click &lt;code&gt;App registrations&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add new registrations corresponding for the following list of modules&lt;/li&gt;
&lt;li&gt;Instructions for adding client secrets, API scopes, and API permissions are detailed below&lt;/li&gt;
&lt;li&gt;Copy all client ids and secret values for reference later on in the setup steps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://azure.github.io/azure-saas/azure-saas/images/identity-framework-manual-step-4-app-registration.png&#34; alt=&#34;(Registered Apps Screenshot)&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;modules&#34;&gt;Modules&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;asdk-admin-api&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Display Name: asdk-admin-api&lt;/li&gt;
&lt;li&gt;Account Type: Accounts in any identity provider or organizational directory&lt;/li&gt;
&lt;li&gt;Grant Admin Consent to openid and offline_access_permissions: true&lt;/li&gt;
&lt;li&gt;API Scopes:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Scope Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;tenant.read&lt;/td&gt;
&lt;td&gt;Read a customer&amp;rsquo;s own Tenant data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tenant.global.read&lt;/td&gt;
&lt;td&gt;Admin-level read permissions for all Tenants&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tenant.write&lt;/td&gt;
&lt;td&gt;Alter a customer&amp;rsquo;s own Tenant data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tenant.global.write&lt;/td&gt;
&lt;td&gt;Admin-level write permissions for all Tenants&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tenant.delete&lt;/td&gt;
&lt;td&gt;Delete a customer&amp;rsquo;s own Tenant data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tenant.global.delete&lt;/td&gt;
&lt;td&gt;Admin-level delete permissions for all Tenants&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;asdk-signupadmin-app&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Display Name: asdk-signupadmin-app&lt;/li&gt;
&lt;li&gt;Account Type: Accounts in any identity provider or organizational directory&lt;/li&gt;
&lt;li&gt;Redirect URI: [Single-page application] &lt;code&gt;https://appsignup{providerName}{environmentName}.azurewebsites.net/signin-oidc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Grant Admin Consent to openid and offline_access_permissions: true&lt;/li&gt;
&lt;li&gt;Create Client Secrets?: Yes&lt;/li&gt;
&lt;li&gt;Required API Permissions:
&lt;ul&gt;
&lt;li&gt;asdk-admin-api
&lt;ul&gt;
&lt;li&gt;tenant.read&lt;/li&gt;
&lt;li&gt;tenant.global.read&lt;/li&gt;
&lt;li&gt;tenant.write&lt;/li&gt;
&lt;li&gt;tenant.global.write&lt;/li&gt;
&lt;li&gt;tenant.delete&lt;/li&gt;
&lt;li&gt;tenant.global.delete&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;asdk-saas-app&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Display Name: asdk-saas-app&lt;/li&gt;
&lt;li&gt;Account Type: Accounts in any identity provider or organizational directory&lt;/li&gt;
&lt;li&gt;Redirect URI: [Single-page application] &lt;code&gt;https://appapplication{providerName}{environmentName}.azurewebsites.net/signin-oidc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Grant Admin Consent to openid and offline_access_permissions: true&lt;/li&gt;
&lt;li&gt;Create Client Secrets?: Yes&lt;/li&gt;
&lt;li&gt;Required API Permissions:
&lt;ul&gt;
&lt;li&gt;asdk-admin-api
&lt;ul&gt;
&lt;li&gt;tenant.read&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;asdk-permissions-api&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Display Name: asdk-permissions-api&lt;/li&gt;
&lt;li&gt;Account Type: Accounts in any identity provider or organizational directory&lt;/li&gt;
&lt;li&gt;Grant Admin Consent to openid and offline_access_permissions: true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IdentityExperienceFramework&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Display Name: IdentityExperienceFramework&lt;/li&gt;
&lt;li&gt;Account Type: Accounts in any identity provider or organizational directory&lt;/li&gt;
&lt;li&gt;Grant Admin Consent to openid and offline_access_permissions: true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ProxyIdentityExperienceFramework&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Display Name: ProxyIdentityExperienceFramework&lt;/li&gt;
&lt;li&gt;Account Type: Accounts in any identity provider or organizational directory&lt;/li&gt;
&lt;li&gt;Grant Admin Consent to openid and offline_access_permissions: true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;module-client-secrets&#34;&gt;Module Client Secrets&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;From the &lt;code&gt;App registration&lt;/code&gt; view&lt;/li&gt;
&lt;li&gt;For the apps that need a secret created (listed above), navigate to them, then navigate to &lt;code&gt;Certificates &amp;amp; secrets&lt;/code&gt; in their navbars&lt;/li&gt;
&lt;li&gt;Add a new client secret and copy the generated value for later reference, giving it an appropriate expiration and description&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://azure.github.io/azure-saas/azure-saas/images/identity-framework-manual-step-4-module-client-secrets.png&#34; alt=&#34;(Client Secrets Screenshot)&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;module-api-scopes&#34;&gt;Module API Scopes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;From the &lt;code&gt;App registration&lt;/code&gt; view&lt;/li&gt;
&lt;li&gt;For the apps that need a scope exposed (listed above), navigate to them, then navigate to &lt;code&gt;Expose an API&lt;/code&gt; in their navbars&lt;/li&gt;
&lt;li&gt;The first time you add a scope, you will be prompted to define the &lt;code&gt;Application ID URI&lt;/code&gt;, do so and save the domain and identifier each independently for later reference&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://azure.github.io/azure-saas/azure-saas/images/identity-framework-manual-step-4-app-expose-api.png&#34; alt=&#34;(Expose an API Scopes)&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;module-api-permissions&#34;&gt;Module API Permissions&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;From the &lt;code&gt;App registration&lt;/code&gt; view&lt;/li&gt;
&lt;li&gt;For the apps that need permissions granted to another app registration (listed above), navigate to them, then navigate to &lt;code&gt;API permissions&lt;/code&gt; in their navbars&lt;/li&gt;
&lt;li&gt;After adding all the permissions, click the &amp;ldquo;Grant Admin Consent&amp;rdquo; button. You must do this on each app registration.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-5-create-a-random-api-key&#34;&gt;Step 5. Create a random API Key&lt;/h3&gt;
&lt;p&gt;An API Key is required to secure communication with the Permissions API. We suggest using a random string at least 20 characters in length consisting of a good mix of uppercase, lowercase, numbers and special characters.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-6-create-policy-keys-in-azure-ad-b2c-tenant&#34;&gt;Step 6. Create Policy Keys in Azure AD B2C Tenant&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://azure.github.io/azure-saas/azure-saas/images/identity-framework-manual-step-6-identity-experience-framework.png&#34; alt=&#34;(Identity Experience Framework Screenshot)&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find &lt;code&gt;Policy keys&lt;/code&gt; in &lt;code&gt;Azure AD B2C Service&lt;/code&gt; by navigating to &lt;code&gt;Identity Experience Framework&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Click Add and select the following options to generate the system policy keys&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://azure.github.io/azure-saas/azure-saas/images/identity-framework-manual-step-6-policy-keys.png&#34; alt=&#34;(Policy Keys Screenshot)&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TokenSigningKeyContainer
&lt;ul&gt;
&lt;li&gt;Options: Generate&lt;/li&gt;
&lt;li&gt;Name: TokenSigningKeyContainer&lt;/li&gt;
&lt;li&gt;Key type: RSA&lt;/li&gt;
&lt;li&gt;Key usage: Signature&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TokenEncryptionKeyContainer
&lt;ul&gt;
&lt;li&gt;Options: Generate&lt;/li&gt;
&lt;li&gt;Name: TokenEncryptionKeyContainer&lt;/li&gt;
&lt;li&gt;Key type: RSA&lt;/li&gt;
&lt;li&gt;Key usage: Encryption&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RestApiKey
&lt;ul&gt;
&lt;li&gt;Options: Manual&lt;/li&gt;
&lt;li&gt;Name: RestApiKey&lt;/li&gt;
&lt;li&gt;Secret: (The API Key you created in step 5)&lt;/li&gt;
&lt;li&gt;Key usage: Signature&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-7-clone-asdk-repo&#34;&gt;Step 7. Clone ASDK repo&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clone the latest release of the &lt;a href=&#34;https://github.com/Azure/azure-saas&#34;&gt;ASDK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-8-initiate-identity-bicep-deployment-with-parameters-from-previous-few-steps&#34;&gt;Step 8. Initiate identity Bicep deployment with parameters from previous few steps&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Generate a standard &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/parameter-files&#34;&gt;Bicep parameters file&lt;/a&gt; using the parameters below&lt;/li&gt;
&lt;li&gt;Navigate to &lt;code&gt;Saas.Identity/Saas.Identity.IaC&lt;/code&gt; for the &lt;code&gt;az deploy&lt;/code&gt; to work correctly&lt;/li&gt;
&lt;li&gt;Deploy identity Bicep with the following parameters
&lt;ul&gt;
&lt;li&gt;You may reference or fill out &lt;code&gt;main.parameters.json&lt;/code&gt; in the Saas.Identity.IaC directory&lt;/li&gt;
&lt;li&gt;(Note: some parameters are referenced in step 13 and must match what is selected here, such as the chosen saasProviderName)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt; az deployment group create --name &amp;quot;IdentityBicepDeployment&amp;quot; --resource-group &amp;lt;#YourAzureResourceGroupName#&amp;gt; template-file ./main.bicep --parameters ./main.parameters.json
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;parameters&#34;&gt;Parameters&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter Name&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AppSettings:AdminServiceBaseUrl&lt;/td&gt;
&lt;td&gt;(URL for downstream admin service)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;azureAdB2cDomainSecretValue&lt;/td&gt;
&lt;td&gt;(Your Tenant domain found on your AD B2C dashboard)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;azureAdB2cInstanceSecretValue&lt;/td&gt;
&lt;td&gt;(The B2C login endpoint in format of https://(Tenant Name).b2clogin.com)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;azureAdB2cTenantIdSecretValue&lt;/td&gt;
&lt;td&gt;(Your Tenant Subscription ID found on your AD B2C dashboard)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;azureAdB2cPermissionsApiClientIdSecretValue&lt;/td&gt;
&lt;td&gt;(The Client ID found on your registered Permissions API app page)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;azureAdB2cPermissionsApiClientSecretSecretValue&lt;/td&gt;
&lt;td&gt;(The Client Secret Value created in step 8)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;permissionsApiApiKeySecretValue&lt;/td&gt;
&lt;td&gt;(API Key created in step 5)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;saasProviderName&lt;/td&gt;
&lt;td&gt;(Select a provider name. This name will be used to name the Azure Resources. (e.g. contoso, myapp). Max Length is 8 characters.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;saasEnvironment&lt;/td&gt;
&lt;td&gt;(Select an environment name. (e.g. &amp;lsquo;prd&amp;rsquo;, &amp;lsquo;stg&amp;rsquo;, &amp;lsquo;dev&amp;rsquo;, &amp;lsquo;tst&amp;rsquo;))&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;saasInstanceNumber&lt;/td&gt;
&lt;td&gt;(Select an instance number. This number will be appended to most Azure Resources created. (e.g. 001, 002, 003))&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sqlAdministratorLogin&lt;/td&gt;
&lt;td&gt;(Select an admin account name used for resource creation)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sqlAdministratorLoginPassword&lt;/td&gt;
&lt;td&gt;(Select a password for the admin account)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;example-parameters-json&#34;&gt;Example Parameters Json&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{
  &amp;quot;$schema&amp;quot;: &amp;quot;https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#&amp;quot;,
  &amp;quot;contentVersion&amp;quot;: &amp;quot;1.0.0.0&amp;quot;,
  &amp;quot;parameters&amp;quot;: {
    &amp;quot;AppSettings:AdminServiceBaseUrl&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;asdk-demo-admin.com&amp;quot;
    },
    &amp;quot;azureAdB2cDomainSecretValue&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;asdkdemotenant.onmicrosoft.com&amp;quot;
    },
    &amp;quot;azureAdB2cInstanceSecretValue&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;https://asdkdemotenant.b2clogin.com&amp;quot;
    },
    &amp;quot;azureAdB2cTenantIdSecretValue&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;00000000-0000-0000-0000-000000000000&amp;quot;
    },
    &amp;quot;azureAdB2cPermissionsApiClientIdSecretValue&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;00000000-0000-0000-0000-000000000000&amp;quot;
    },
    &amp;quot;azureAdB2cPermissionsApiClientSecretSecretValue&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;FooBar&amp;quot;
    },
    &amp;quot;permissionsApiApiKeySecretValue&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;FooBar&amp;quot;
    },
    &amp;quot;saasProviderName&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;contoso&amp;quot;
    },
    &amp;quot;saasEnvironment&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;tst&amp;quot;
    },
    &amp;quot;saasInstanceNumber&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;001&amp;quot;
    },
    &amp;quot;sqlAdministratorLogin&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;sqlAdmin&amp;quot;
    },
    &amp;quot;sqlAdministratorLoginPassword&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;FooBar1&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h3 id=&#34;step-9-configure-transform-ief-policies-with-config-values-from-previous-few-steps&#34;&gt;Step 9. Configure transform IEF Policies with config values from previous few steps&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Launch PowerShell and navigate to project directory &lt;code&gt;src\Saas.Identity\Saas.IdentityProvider\policies&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Launch VS Code using:&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;code .
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Open or create &lt;code&gt;appsettings.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Note: You may reference &lt;code&gt;sample.appsettings.json&lt;/code&gt; for basic parameter setup&lt;/li&gt;
&lt;li&gt;Complete the settings for the following attributes:&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter Name&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;(Select a name for the environment (e.g. Development))&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Production&lt;/td&gt;
&lt;td&gt;(a boolean indicating production status)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tenant&lt;/td&gt;
&lt;td&gt;(Name of Tenant)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PolicySettings:IdentityExperienceFrameworkAppId&lt;/td&gt;
&lt;td&gt;(App ID of IdentityExperienceFramework app created in step 4)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PolicySettings:ProxyIdentityExperienceFrameworkAppId&lt;/td&gt;
&lt;td&gt;(App ID of ProxyIdentityExperienceFramework app created in step 4)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PolicySettings:PermissionsAPIUrl&lt;/td&gt;
&lt;td&gt;(URL for the permissions endpoint in the Permission module (e.g. (PermissionsApiFQDN)/api/CustomClaims/permissions))&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PolicySettings:RolesAPIUrl&lt;/td&gt;
&lt;td&gt;(URL for the roles endpoint in the Permission module (e.g. (PermissionsApiFQDN)/api/CustomClaims/roles))&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Open the VS Code command palette (shortcut: ctrl + shift + p)&lt;/li&gt;
&lt;li&gt;Execute &lt;code&gt;B2C Build All Policies&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Navigate to &lt;code&gt;Environments&lt;/code&gt; dropdown in VS Code Explorer for generated policies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://azure.github.io/azure-saas/azure-saas/images/identity-framework-manual-step-9-vscode-ief-policies.png&#34; alt=&#34;(VS Code Screenshot)&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-10-upload-ief-policies-to-azure-ad-b2c-tenant&#34;&gt;Step 10. Upload IEF Policies to Azure AD B2C Tenant&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;In your Azure dashboard, navigate to &lt;code&gt;Azure AD B2C&lt;/code&gt; service, then to &lt;code&gt;Identity Framework Experience&lt;/code&gt; in the nav bar&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Upload custom policy&lt;/code&gt; and upload each of the generated policy files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://azure.github.io/azure-saas/azure-saas/images/identity-framework-manual-step-10-upload-policies.png&#34; alt=&#34;(Policy Upload Screenshot)&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-11-create-parametersjson-for-input-into-main-bicep-deployment&#34;&gt;Step 11. Create parameters.json for input into main Bicep deployment&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Generate a standard &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/parameter-files&#34;&gt;Bicep parameters file&lt;/a&gt; using the parameters below&lt;/li&gt;
&lt;li&gt;Place file into any folder (you will need it on step 2.b of the &lt;a href=&#34;https://azure.github.io/azure-saas/quick-start/#2b-deploying-to-azure---entire-solution&#34;&gt;Quick Start&lt;/a&gt; guide)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;parameters-1&#34;&gt;Parameters&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter Name&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;adminApiScopes&lt;/td&gt;
&lt;td&gt;(space delimited string of admin scope names (e.g. &amp;ldquo;test.scope tenant.delete tenant.global.delete tenant.global.read tenant.global.write tenant.read tenant.write&amp;rdquo;))&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;adminApiScopeBaseUrl&lt;/td&gt;
&lt;td&gt;(Reference your Tenant domain and the registered Admin app identifier, format of&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;azureAdB2cAdminApiClientIdSecretValue&lt;/td&gt;
&lt;td&gt;(Admin Api Client Id found under its Registered App entry)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;azureAdB2cDomainSecretValue&lt;/td&gt;
&lt;td&gt;(Your Tenant domain found on your AD B2C dashboard)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;azureAdB2cInstanceSecretValue&lt;/td&gt;
&lt;td&gt;(The B2C login endpoint in format of https://{TENANT_NAME}.b2clogin.com)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;azureAdB2cSaasAppClientIdSecretValue&lt;/td&gt;
&lt;td&gt;(SaaS App Api Client Id found under its Registered App entry)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;azureAdB2cSaasAppClientSecretSecretValue&lt;/td&gt;
&lt;td&gt;(Secret value created in step 4)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;azureAdB2cSignupAdminClientIdSecretValue&lt;/td&gt;
&lt;td&gt;(SaaS App Api Client Id found under its Registered App entry)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;azureAdB2cSignupAdminClientSecretSecretValue&lt;/td&gt;
&lt;td&gt;(Secret value created in step 4)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;azureAdB2cTenantIdSecretValue&lt;/td&gt;
&lt;td&gt;(Your Tenant Subscription ID found on your AD B2C dashboard)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;permissionsApiHostName&lt;/td&gt;
&lt;td&gt;(The FQDN of the Permissions API)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;permissionsApiApiKeySecretValue&lt;/td&gt;
&lt;td&gt;(API Key generated in step 5)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;saasAppApiScopes&lt;/td&gt;
&lt;td&gt;(space delimited string of SaaS App Api scope names (e.g. &amp;ldquo;test.scope tenant.delete tenant.global.delete tenant.global.read tenant.global.write tenant.read tenant.write&amp;rdquo;))&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;saasProviderName&lt;/td&gt;
&lt;td&gt;(created in step 8)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;saasEnvironment&lt;/td&gt;
&lt;td&gt;(created in step 8)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;saasInstanceNumber&lt;/td&gt;
&lt;td&gt;(created in step 8)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sqlAdministratorLogin&lt;/td&gt;
&lt;td&gt;(created in step 8)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sqlAdministratorLoginPassword&lt;/td&gt;
&lt;td&gt;(created in step 8)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;example&#34;&gt;Example&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{
  &amp;quot;$schema&amp;quot;: &amp;quot;https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#&amp;quot;,
  &amp;quot;contentVersion&amp;quot;: &amp;quot;1.0.0.0&amp;quot;,
  &amp;quot;parameters&amp;quot;: {
	&amp;quot;adminApiScopes&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;test.scope tenant.delete tenant.global.delete tenant.global.read tenant.global.write tenant.read tenant.write&amp;quot;
    },
	&amp;quot;adminApiScopeBaseUrl&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;https://asdkdemotenant.onmicrosoft.com/00000000-0000-0000-0000-000000000000&amp;quot;
    },
	&amp;quot;azureAdB2cAdminApiClientIdSecretValue&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;00000000-0000-0000-0000-000000000000&amp;quot;
    },
    &amp;quot;AppSettings:AdminServiceBaseUrl&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;asdk-demo-admin.com&amp;quot;
    },
    &amp;quot;azureAdB2cDomainSecretValue&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;asdkdemotenant.onmicrosoft.com&amp;quot;
    },
    &amp;quot;azureAdB2cInstanceSecretValue&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;https://asdkdemotenant.b2clogin.com&amp;quot;
    },
	&amp;quot;azureAdB2cSaasAppClientIdSecretValue&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;00000000-0000-0000-0000-000000000000&amp;quot;
    },
	&amp;quot;azureAdB2cSaasAppClientSecretSecretValue&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;FooBar&amp;quot;
    },
	&amp;quot;azureAdB2cSignupAdminClientIdSecretValue&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;00000000-0000-0000-0000-000000000000&amp;quot;
    },
	&amp;quot;azureAdB2cSignupAdminClientSecretSecretValue&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;FooBar&amp;quot;
    },
    &amp;quot;azureAdB2cTenantIdSecretValue&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;00000000-0000-0000-0000-000000000000&amp;quot;
    },
    &amp;quot;azureAdB2cPermissionsApiClientIdSecretValue&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;00000000-0000-0000-0000-000000000000&amp;quot;
    },
    &amp;quot;azureAdB2cPermissionsApiClientSecretSecretValue&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;FooBar&amp;quot;
    },
    &amp;quot;permissionsApiHostName&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;https://asdkdemopermissions.com&amp;quot;
    },
    &amp;quot;permissionsApiApiKeySecretValue&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;FooBar&amp;quot;
    },
    &amp;quot;saasAppApiScopes&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;test.scope tenant.delete tenant.global.delete tenant.global.read tenant.global.write tenant.read tenant.write&amp;quot;
    },
    &amp;quot;saasProviderName&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;contoso&amp;quot;
    },
    &amp;quot;saasEnvironment&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;tst&amp;quot;
    },
    &amp;quot;saasInstanceNumber&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;001&amp;quot;
    },
    &amp;quot;sqlAdministratorLogin&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;sqlAdmin&amp;quot;
    },
    &amp;quot;sqlAdministratorLoginPassword&amp;quot;: {
      &amp;quot;value&amp;quot;: &amp;quot;FooBar1&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
  </channel>
</rss>
